import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

// Single-file SPA component
// Usage: Put this in src/App.jsx of a React + Tailwind project. Install framer-motion.

const questions = [
  { key: "field", question: "اختر المجال:", options: ["Frontend", "Backend", "Data Science"] },
  { key: "level", question: "ما مستواك؟", options: ["مبتدئ", "متوسط", "محترف"] },
  { key: "hoursPerWeek", question: "كم ساعة لديك في الأسبوع؟", options: ["1-3", "4-6", "7+"] },
  { key: "explanationType", question: "هل تريد شرح مفصل أم سريع؟", options: ["مفصل", "سريع"] },
  { key: "contentType", question: "هل تريد تعلم عملي أم نظري؟", options: ["عملي", "نظري"] },
  { key: "paidOrFree", question: "هل تريد مصادر مجانية أم مدفوعة؟", options: ["مجاني", "مدفوع"] }
];

export default function App() {
  const [studentData, setStudentData] = useState({
    field: "",
    level: "",
    hoursPerWeek: "",
    explanationType: "",
    contentType: "",
    paidOrFree: ""
  });

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);

  const total = questions.length;

  function handleOptionClick(key, value) {
    // 1) update student data
    setStudentData(prev => ({ ...prev, [key]: value }));

    // 2) advance index (with small delay for UX smoothness)
    // using requestAnimationFrame so we don't need timers
    // but we'll advance immediately to keep the flow snappy
    setCurrentQuestionIndex(i => Math.min(i + 1, total));
  }

  function handleBack() {
    setCurrentQuestionIndex(i => Math.max(i - 1, 0));
  }

  function handleSubmit() {
    // Final JSON ready to send to backend
    const payload = { ...studentData };
    console.log("Submitting payload:", payload);
    // TODO: send with fetch('/generate-plan', { method: 'POST', headers..., body: JSON.stringify(payload) })
    alert('تم تسجيل اختياراتك في الـ console. (انظر Console)');
  }

  // Animation variants
  const cardVariants = {
    enter: { opacity: 0, y: 20 },
    center: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-6">
      <div className="w-full max-w-md">
        <div className="bg-white rounded-2xl shadow-lg p-6">
          <h1 className="text-2xl font-semibold mb-2 text-center">خطوات اختيار خطة التعلم</h1>
          <p className="text-sm text-gray-500 text-center mb-4">سؤال واحد يظهر في كل مرة — اختر الإجابة المناسبة</p>

          {/* Progress */}
          <div className="mb-4">
            <div className="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
              <div
                className="h-2 rounded-full transition-all duration-500"
                style={{ width: `${Math.min((currentQuestionIndex / total) * 100, 100)}%` }}
              />
            </div>
            <div className="text-xs text-gray-600 mt-2 text-center">سؤال {Math.min(currentQuestionIndex + 1, total)} من {total}</div>
          </div>

          {/* Card with question */}
          <div className="relative h-64">
            <AnimatePresence mode="wait">
              {currentQuestionIndex < total ? (
                <motion.div
                  key={questions[currentQuestionIndex].key}
                  variants={cardVariants}
                  initial="enter"
                  animate="center"
                  exit="exit"
                  transition={{ duration: 0.35 }}
                  className="absolute inset-0"
                >
                  <div className="bg-white h-full rounded-xl p-5 flex flex-col">
                    <div className="mb-4">
                      <div className="text-xl font-medium">{questions[currentQuestionIndex].question}</div>
                    </div>

                    <div className="grid grid-cols-1 gap-3 mt-2">
                      {questions[currentQuestionIndex].options.map(option => {
                        const key = questions[currentQuestionIndex].key;
                        const isSelected = studentData[key] === option;
                        return (
                          <button
                            key={option}
                            onClick={() => handleOptionClick(key, option)}
                            className={`w-full text-right py-3 px-4 rounded-lg shadow-sm font-medium transition-transform transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-300 ${isSelected ? 'bg-green-100 border border-green-300' : 'bg-gray-50'}`}
                          >
                            {option}
                          </button>
                        );
                      })}
                    </div>

                    <div className="mt-auto flex justify-between items-center">
                      <button
                        onClick={handleBack}
                        disabled={currentQuestionIndex === 0}
                        className="text-sm text-gray-500 disabled:opacity-40"
                      >
                        رجوع
                      </button>

                      <div className="text-xs text-gray-400">اختر للانتقال للسؤال التالي</div>
                    </div>
                  </div>
                </motion.div>
              ) : (
                // Final screen before submit
                <motion.div
                  key="summary"
                  variants={cardVariants}
                  initial="enter"
                  animate="center"
                  exit="exit"
                  transition={{ duration: 0.35 }}
                  className="absolute inset-0"
                >
                  <div className="bg-white h-full rounded-xl p-5 flex flex-col">
                    <div className="mb-4">
                      <div className="text-xl font-medium">مراجعة إجاباتك</div>
                      <p className="text-sm text-gray-500">تأكد من الإجابات ثم اضغط إرسال</p>
                    </div>

                    <div className="flex-1 overflow-auto mt-2">
                      <ul className="space-y-2">
                        {questions.map(q => (
                          <li key={q.key} className="flex justify-between bg-gray-50 p-3 rounded-md">
                            <span className="font-medium">{q.question}</span>
                            <span className="text-gray-700">{studentData[q.key] || '—'}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    <div className="mt-4 flex gap-3">
                      <button onClick={() => setCurrentQuestionIndex(0)} className="flex-1 py-3 rounded-lg bg-gray-100 hover:bg-gray-200">تعديل</button>
                      <button onClick={handleSubmit} className="flex-1 py-3 rounded-lg bg-indigo-600 text-white hover:brightness-105">إرسال</button>
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {/* Small footer: show raw JSON (for dev) */}
          <div className="mt-4 text-xs text-gray-500 bg-gray-50 p-3 rounded-md">
            <div className="font-medium mb-1">JSON (جاهز للإرسال):</div>
            <pre className="text-[11px] break-words">{JSON.stringify(studentData, null, 2)}</pre>
          </div>
        </div>

        {/* Extra: floating submit for quick access when on last question */}
        {currentQuestionIndex === total && (
          <div className="mt-4 flex justify-center">
            <button onClick={handleSubmit} className="px-6 py-3 rounded-full bg-green-600 text-white shadow-lg hover:brightness-105">إرسال الآن</button>
          </div>
        )}

      </div>
    </div>
  );
}
